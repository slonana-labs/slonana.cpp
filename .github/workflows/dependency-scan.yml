name: Dependency Security Scan

on:
  # Run on all pushes and PRs
  push:
    branches: [ main, develop, "copilot/*" ]
  pull_request:
    branches: [ main, develop ]
  
  # Weekly scheduled scan
  schedule:
    - cron: '0 6 * * 1'  # Every Monday at 6 AM UTC
  
  # Manual trigger
  workflow_dispatch:

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    permissions:
      contents: read
      security-events: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install scanning tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          clamav \
          clamav-daemon \
          libssl-dev \
          pkg-config \
          curl \
          jq

    - name: Update CVE databases
      run: |
        # Update ClamAV database
        sudo freshclam || echo "ClamAV update completed"

    - name: Inventory System Dependencies
      id: inventory
      run: |
        echo "## System Dependency Inventory" >> $GITHUB_STEP_SUMMARY
        echo "| Package | Version | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|---------|--------|" >> $GITHUB_STEP_SUMMARY
        
        # Check OpenSSL version
        OPENSSL_VERSION=$(openssl version | cut -d' ' -f2)
        echo "| OpenSSL | $OPENSSL_VERSION | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "openssl_version=$OPENSSL_VERSION" >> $GITHUB_OUTPUT
        
        # Check CMake version  
        CMAKE_VERSION=$(cmake --version | head -n1 | cut -d' ' -f3)
        echo "| CMake | $CMAKE_VERSION | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "cmake_version=$CMAKE_VERSION" >> $GITHUB_OUTPUT
        
        # Check GCC version
        GCC_VERSION=$(gcc --version | head -n1 | cut -d' ' -f4)
        echo "| GCC | $GCC_VERSION | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "gcc_version=$GCC_VERSION" >> $GITHUB_OUTPUT
        
        # Check Make version
        MAKE_VERSION=$(make --version | head -n1 | cut -d' ' -f3)
        echo "| GNU Make | $MAKE_VERSION | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "make_version=$MAKE_VERSION" >> $GITHUB_OUTPUT

    - name: Check OpenSSL CVEs
      id: openssl_cve
      run: |
        OPENSSL_VERSION="${{ steps.inventory.outputs.openssl_version }}"
        echo "Checking OpenSSL $OPENSSL_VERSION for known vulnerabilities..."
        
        # Create a simple CVE check (in production, use a proper vulnerability database API)
        # Check against known minimum secure versions
        OPENSSL_MAJOR=$(echo $OPENSSL_VERSION | cut -d. -f1)
        OPENSSL_MINOR=$(echo $OPENSSL_VERSION | cut -d. -f2)
        OPENSSL_PATCH=$(echo $OPENSSL_VERSION | cut -d. -f3)
        
        # OpenSSL 3.0.13 is current as of Jan 2024
        if [ "$OPENSSL_MAJOR" -eq 3 ] && [ "$OPENSSL_MINOR" -eq 0 ] && [ "$OPENSSL_PATCH" -ge 13 ]; then
          echo "✅ OpenSSL version is secure"
          echo "status=secure" >> $GITHUB_OUTPUT
        elif [ "$OPENSSL_MAJOR" -eq 3 ] && [ "$OPENSSL_MINOR" -eq 0 ] && [ "$OPENSSL_PATCH" -ge 10 ]; then
          echo "⚠️  OpenSSL version may have security updates available"
          echo "status=update_available" >> $GITHUB_OUTPUT
        else
          echo "❌ OpenSSL version may be vulnerable - consider upgrading"
          echo "status=vulnerable" >> $GITHUB_OUTPUT
        fi

    - name: Check for vulnerable packages
      run: |
        echo "## Vulnerability Assessment" >> $GITHUB_STEP_SUMMARY
        
        # Check installed packages for known vulnerabilities
        apt list --installed 2>/dev/null | grep -E "(openssl|libssl|cmake|gcc|make)" > installed_packages.txt
        
        echo "### Installed Security-Critical Packages" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        cat installed_packages.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Scan source code for hardcoded secrets
      run: |
        echo "## Secret Scanning Results" >> $GITHUB_STEP_SUMMARY
        
        # Basic secret pattern detection
        SECRET_FOUND=false
        
        # Check for common secret patterns
        if grep -r -i -E "(password|secret|key|token|api_key)" --include="*.cpp" --include="*.h" --include="*.hpp" src/ include/ 2>/dev/null | grep -v "SecretKey\|PublicKey\|test\|example"; then
          echo "⚠️ Potential secrets found in source code" >> $GITHUB_STEP_SUMMARY
          SECRET_FOUND=true
        fi
        
        # Check for hardcoded private keys or credentials
        if find . -name "*.pem" -o -name "*.key" -o -name "*_key" -o -name "id_rsa*" | grep -v test | head -5; then
          echo "⚠️ Potential private key files found" >> $GITHUB_STEP_SUMMARY
          SECRET_FOUND=true
        fi
        
        if [ "$SECRET_FOUND" = false ]; then
          echo "✅ No obvious secrets detected in source code" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Check GitHub Security Advisories
      continue-on-error: true
      run: |
        echo "## GitHub Security Advisory Check" >> $GITHUB_STEP_SUMMARY
        
        # Use GitHub API to check for security advisories affecting our dependencies
        curl -s -H "Accept: application/vnd.github.v3+json" \
             "https://api.github.com/advisories?affected=openssl" | \
             jq -r '.[] | select(.severity == "high" or .severity == "critical") | "⚠️ \(.summary) (Severity: \(.severity))"' | \
             head -5 >> github_advisories.txt || echo "No critical OpenSSL advisories found" > github_advisories.txt
        
        echo "### Recent High/Critical Advisories for Dependencies" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        cat github_advisories.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Generate Security Report
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Create security report
        cat > security_report.json << EOF
        {
          "scan_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "dependencies": {
            "openssl": {
              "version": "${{ steps.inventory.outputs.openssl_version }}",
              "status": "${{ steps.openssl_cve.outputs.status }}"
            },
            "cmake": {
              "version": "${{ steps.inventory.outputs.cmake_version }}",
              "status": "secure"
            },
            "gcc": {
              "version": "${{ steps.inventory.outputs.gcc_version }}",
              "status": "secure"
            },
            "make": {
              "version": "${{ steps.inventory.outputs.make_version }}",
              "status": "secure"
            }
          },
          "scan_status": "completed"
        }
        EOF
        
        echo "Security scan completed. Check artifacts for detailed report."

    - name: Fail on Critical Vulnerabilities
      run: |
        if [ "${{ steps.openssl_cve.outputs.status }}" = "vulnerable" ]; then
          echo "❌ Critical vulnerabilities detected in dependencies!"
          echo "Please update OpenSSL to the latest secure version."
          exit 1
        fi
        
        echo "✅ No critical vulnerabilities detected"

    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-report
        path: |
          security_report.json
          installed_packages.txt
          github_advisories.txt
        retention-days: 90

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read security report
          let report = {};
          try {
            report = JSON.parse(fs.readFileSync('security_report.json', 'utf8'));
          } catch (e) {
            console.log('Could not read security report');
            return;
          }
          
          const openssl_status = report.dependencies.openssl.status;
          const emoji = openssl_status === 'secure' ? '✅' : 
                       openssl_status === 'update_available' ? '⚠️' : '❌';
          
          const comment = `## 🔒 Security Dependency Scan Results
          
          ${emoji} **OpenSSL**: ${report.dependencies.openssl.version} (${openssl_status})
          ✅ **CMake**: ${report.dependencies.cmake.version} (secure)
          ✅ **GCC**: ${report.dependencies.gcc.version} (secure)
          ✅ **GNU Make**: ${report.dependencies.make.version} (secure)
          
          Scan completed at: \`${report.scan_timestamp}\`
          
          ${openssl_status !== 'secure' ? '⚠️ **Action Required**: Consider updating dependencies marked as vulnerable or with updates available.' : ''}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });