version: '3.8'

services:
  # Single validator node for development/testing
  slonana-validator:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: slonana-validator
    ports:
      - "8899:8899"   # RPC
      - "8900:8900"   # WebSocket
      - "8001:8001"   # Gossip
      - "8003:8003"   # TPU
    volumes:
      - validator_data:/opt/slonana/data
      - validator_logs:/opt/slonana/logs
      - ./config:/opt/slonana/config:ro
    environment:
      - SLONANA_LOG_LEVEL=info
      - SLONANA_RPC_BIND_ADDRESS=0.0.0.0:8899
      - SLONANA_GOSSIP_BIND_ADDRESS=0.0.0.0:8001
      - SLONANA_IDENTITY_KEYPAIR=/opt/slonana/config/validator-keypair.json
    networks:
      - slonana-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8899/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Development environment with debugging tools
  slonana-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: slonana-dev
    ports:
      - "8899:8899"
      - "8900:8900"
      - "8001:8001"
      - "8003:8003"
    volumes:
      - .:/workspace
      - dev_data:/opt/slonana/data
      - dev_logs:/opt/slonana/logs
    environment:
      - SLONANA_LOG_LEVEL=debug
    networks:
      - slonana-network
    stdin_open: true
    tty: true
    profiles:
      - dev

  # Multi-node test cluster
  slonana-node-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: slonana-node-1
    ports:
      - "18899:8899"
      - "18001:8001"
    volumes:
      - node1_data:/opt/slonana/data
      - node1_logs:/opt/slonana/logs
      - ./config/cluster:/opt/slonana/config:ro
    environment:
      - SLONANA_NODE_ID=1
      - SLONANA_CLUSTER_CONFIG=/opt/slonana/config/cluster.toml
      - SLONANA_BOOTSTRAP_PEERS=slonana-node-2:8001,slonana-node-3:8001
    networks:
      - slonana-cluster
    restart: unless-stopped
    profiles:
      - cluster

  slonana-node-2:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: slonana-node-2
    ports:
      - "28899:8899"
      - "28001:8001"
    volumes:
      - node2_data:/opt/slonana/data
      - node2_logs:/opt/slonana/logs
      - ./config/cluster:/opt/slonana/config:ro
    environment:
      - SLONANA_NODE_ID=2
      - SLONANA_CLUSTER_CONFIG=/opt/slonana/config/cluster.toml
      - SLONANA_BOOTSTRAP_PEERS=slonana-node-1:8001,slonana-node-3:8001
    networks:
      - slonana-cluster
    restart: unless-stopped
    profiles:
      - cluster

  slonana-node-3:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: slonana-node-3
    ports:
      - "38899:8899"
      - "38001:8001"
    volumes:
      - node3_data:/opt/slonana/data
      - node3_logs:/opt/slonana/logs
      - ./config/cluster:/opt/slonana/config/cluster.toml:ro
    environment:
      - SLONANA_NODE_ID=3
      - SLONANA_CLUSTER_CONFIG=/opt/slonana/config/cluster.toml
      - SLONANA_BOOTSTRAP_PEERS=slonana-node-1:8001,slonana-node-2:8001
    networks:
      - slonana-cluster
    restart: unless-stopped
    profiles:
      - cluster

  # Monitoring and metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: slonana-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - slonana-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: slonana-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=slonana123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - slonana-network
    profiles:
      - monitoring

  # Load balancer for RPC requests
  nginx:
    image: nginx:alpine
    container_name: slonana-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - slonana-validator
    networks:
      - slonana-network
    profiles:
      - production

networks:
  slonana-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

  slonana-cluster:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  # Single node volumes
  validator_data:
    driver: local
  validator_logs:
    driver: local
  
  # Development volumes
  dev_data:
    driver: local
  dev_logs:
    driver: local
  
  # Cluster node volumes
  node1_data:
    driver: local
  node1_logs:
    driver: local
  node2_data:
    driver: local
  node2_logs:
    driver: local
  node3_data:
    driver: local
  node3_logs:
    driver: local
  
  # Monitoring volumes
  prometheus_data:
    driver: local
  grafana_data:
    driver: local